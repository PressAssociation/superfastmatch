DATA    lut+0x00(SB)/8, $0x00000000000000FF
DATA    lut+0x08(SB)/8, $0x0000000000000000
DATA    lut+0x10(SB)/8, $0x000000000000FFFF
DATA    lut+0x18(SB)/8, $0x0000000000000000
DATA    lut+0x20(SB)/8, $0x0000000000FFFFFF
DATA    lut+0x28(SB)/8, $0x0000000000000000
DATA    lut+0x30(SB)/8, $0x00000000FFFFFFFF
DATA    lut+0x38(SB)/8, $0x0000000000000000
DATA    lut+0x40(SB)/8, $0x000000FFFFFFFFFF
DATA    lut+0x48(SB)/8, $0x0000000000000000
DATA    lut+0x50(SB)/8, $0x0000FFFFFFFFFFFF
DATA    lut+0x58(SB)/8, $0x0000000000000000
DATA    lut+0x60(SB)/8, $0x00FFFFFFFFFFFFFF
DATA    lut+0x68(SB)/8, $0x0000000000000000
DATA    lut+0x70(SB)/8, $0xFFFFFFFFFFFFFFFF
DATA    lut+0x78(SB)/8, $0x0000000000000000
DATA    lut+0x80(SB)/8, $0xFFFFFFFFFFFFFFFF
DATA    lut+0x88(SB)/8, $0x00000000000000FF
DATA    lut+0x90(SB)/8, $0xFFFFFFFFFFFFFFFF
DATA    lut+0x98(SB)/8, $0x000000000000FFFF
DATA    lut+0xA0(SB)/8, $0xFFFFFFFFFFFFFFFF
DATA    lut+0xA8(SB)/8, $0x0000000000FFFFFF
DATA    lut+0xB0(SB)/8, $0xFFFFFFFFFFFFFFFF
DATA    lut+0xB8(SB)/8, $0x00000000FFFFFFFF
DATA    lut+0xC0(SB)/8, $0xFFFFFFFFFFFFFFFF
DATA    lut+0xC8(SB)/8, $0x000000FFFFFFFFFF
DATA    lut+0xD0(SB)/8, $0xFFFFFFFFFFFFFFFF
DATA    lut+0xD8(SB)/8, $0x0000FFFFFFFFFFFF
DATA    lut+0xE0(SB)/8, $0xFFFFFFFFFFFFFFFF
DATA    lut+0xE8(SB)/8, $0x00FFFFFFFFFFFFFF
DATA    lut+0xF0(SB)/8, $0xFFFFFFFFFFFFFFFF
DATA    lut+0xF8(SB)/8, $0xFFFFFFFFFFFFFFFF
GLOBL   lut(SB), $0x100

// func FastSumUint8(x []uint8) uint64
TEXT Â·FastSumUint8(SB),7,$0
	MOVQ x+0(FP), SI  // data pointer
	MOVQ x+8(FP), CX  // len(x)
	XORQ AX, AX  // result 	   
	PXOR X0,X0 // parallel total
	CMPQ CX,$0
	// Zero Length
	JE done
	// Less than 16 bytes
	CMPQ CX,$16
	JLE small
	
large:
	PXOR X1, X1
	MOVOU (SI),X2
	PSADBW X2,X1  
	PADDQ X1,X0
	ADDQ $16, SI
	SUBQ $16, CX
	CMPQ CX, $16
	JGE large
	CMPQ CX,$0
	JE total

small:
	SUBQ $1,CX
	ADDQ CX,CX
	MOVOU (SI),X1
	MOVOU lut(SB)(CX*8),X2
	PXOR X3, X3
	PAND X2,X1
	PSADBW X1,X3
	PADDQ X3,X0

total:
	PSHUFD $238,X0,X1
	PADDQ X0,X1
	MOVQ X1,AX
	
done:
	MOVQ AX,ret+24(FP)
	RET

